#!/bin/bash

# Author: Dmitrii Ivanushkin, february 2024

#----------------------Initializing of variables------------------------#

POSIXLY_CORRECT=yes

GREEN="\033[0;32m"
BLUE="\033[1;34m"
ORANGE="\033[0;33m"
RESET="\033[0m"

FILES=()
has_a=0
has_b=0
has_c=0
has_list=0
has_list_currency=0
has_status=0
has_profit=0
DATETIME_A=""
DATETIME_B=""
CURRENCY=""
USER=""

if [ -z "${XTF_PROFIT}" ]; then
    export XTF_PROFIT=20
fi

#----------------------------HELP FUNCTION------------------------------#

print_help() {
    echo -e "\n"
    echo -e "\t${ORANGE}xtf [-h|--help] [FILTR] [PŘÍKAZ] UŽIVATEL LOG [LOG2 [...]${RESET}"
    echo -e "\n"
    echo -e "\t${BLUE}PŘÍKAZ${RESET} může být jeden z:"
    echo -e "\t\t${GREEN}list${RESET} - výpis záznamů pro daného uživatele."
    echo -e "\t\t${GREEN}list-currency${RESET} - výpis seřazeného seznamu vyskytujících se měn."
    echo -e "\t\t${GREEN}status${RESET} - výpis skutečného stavu účtu seskupeného a seřazeného dle jednotlivých měn."
    echo -e "\t\t${GREEN}profit${RESET} - výpis stavu účtu zákazníka se započítaným fiktivním výnosem."
    echo -e "\n"
    echo -e "\t${BLUE}FILTR${RESET} může být kombinace následujících:"
    echo -e "\t\t${GREEN}-a ${BLUE}DATETIME${RESET} - after: jsou uvažovány pouze záznamy PO tomto datu a čase (bez něj). ${BLUE}DATETIME${RESET} je formátu ${BLUE}YYYY-MM-DD HH:MM:SS${RESET}."
    echo -e "\t\t${GREEN}-b ${BLUE}DATETIME${RESET} - before: jsou uvažovány pouze záznamy PŘED tímto datem a časem (bez něj)."
    echo -e "\t\t${GREEN}-c ${BLUE}CURRENCY${RESET} - jsou uvažovány pouze záznamy odpovídající dané měně."
    echo -e "\n"
    echo -e "\t${GREEN}-h${RESET} a ${GREEN}--help${RESET} vypíšou nápovědu s krátkým popisem každého příkazu a přepínače."
    echo -e "\n"
}

usage() {
    print_help
    exit 0
}

usage_with_error() {
    print_help
    exit 1
}

#--------------------------CHECKING ARGUMENTS---------------------------#

while [ "$#" -gt 0 ]; do
    case "$1" in
    -h | --help)
        usage
        ;;
    -a)
        if [[ "$2" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}\ [0-9]{2}:[0-9]{2}:[0-9]{2}$ ]]; then
            DATETIME_A="$2"
        else
            echo -e "Chyba: -a potřebuje argument ve formátu YYYY-MM-DD HH:MM:SS\n" >&2
            usage_with_error
        fi
        has_a=1
        shift
        ;;
    -b)
        if [[ "$2" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}\ [0-9]{2}:[0-9]{2}:[0-9]{2}$ ]]; then
            DATETIME_B="$2"
        else
            echo -e "Chyba: -b potřebuje argument ve formátu YYYY-MM-DD HH:MM:SS\n" >&2
            usage_with_error
        fi
        has_b=1
        shift
        ;;
    -c)
        if [ -z "$2" ]; then
            echo "Chyba: -c potřebuje měnu" >&2
            usage_with_error
        else
            CURRENCY="$2"
            has_c=1
        fi
        shift
        ;;
    list)
        if [ -z "$2" ]; then
            echo "Chyba: list potřebuje uživatele" >&2
            usage_with_error
        else
            USER="$2"
            has_list=1
        fi
        shift
        ;;
    list-currency)
        if [ -z "$2" ]; then
            echo "Chyba: list-currency potřebuje uživatele" >&2
            usage_with_error
        else
            USER="$2"
            has_list_currency=1
        fi
        shift
        ;;
    status)
        if [ -z "$2" ]; then
            echo "Chyba: status potřebuje uživatele" >&2
            usage_with_error
        else
            USER="$2"
            has_status=1
        fi
        shift
        ;;
    profit)
        if [ -z "$2" ]; then
            echo "Chyba: profit potřebuje uživatele" >&2
            usage_with_error
        else
            USER="$2"
            has_profit=1
        fi
        shift
        ;;
    *.log)
        FILES+=("$1")
        ;;
    *.gz)
        gunzip -c "$1" >"${1%.gz}"
        # zcat "$1" | function
        FILES+=("${1%.gz}")
        ;;
    *)
        if [[ "$USER" -eq "" && "$has_list" -eq 0 ]]; then
            has_list=1
            USER="$1"
        else
            echo -e "Chyba: neznámý argument '${1}'"
            usage_with_error
        fi
        ;;
    esac
    shift
done

#--------------------------FILTER FILES---------------------------#

filter_by_datetime() {
    local file="$1"
    local operator_a="none"
    local operator_b="none"

    if [[ "$has_a" -eq 1 ]]; then
        operator_a=">"
    fi

    if [[ "$has_b" -eq 1 ]]; then
        operator_b="<"
    fi

    args_datetime_a=$(date +%s -d "$DATETIME_A")
    args_datetime_b=$(date +%s -d "$DATETIME_B")

    if [[ "$operator_a" != "none" && "$operator_b" == "none" ]]; then
        awk -F';' -v args_datetime="$args_datetime_a" -v operator="$operator_a" '
            {
                file_datetime = mktime(gensub(/[-:]/, " ", "g", $2))
                if (operator == ">" && file_datetime > args_datetime) {
                    print
                }
            }
        ' "$file"
    elif [[ "$operator_b" != "none" && "$operator_a" == "none" ]]; then
        awk -F';' -v args_datetime="$args_datetime_b" -v operator="$operator_b" '
            {
                file_datetime = mktime(gensub(/[-:]/, " ", "g", $2))
                if (operator == "<" && file_datetime < args_datetime) {
                    print
                }
            }
        ' "$file"
    elif [[ "$operator_a" != "none" && "$operator_b" != "none" ]]; then
        awk -F';' -v args_datetime_a="$args_datetime_a" -v args_datetime_b="$args_datetime_b" -v operator_a="$operator_a" -v operator_b="$operator_b" '
            {
                file_datetime = mktime(gensub(/[-:]/, " ", "g", $2))
                if ((operator_a == ">" && file_datetime > args_datetime_a) && (operator_b == "<" && file_datetime < args_datetime_b)) {
                    print
                }
            }
        ' "$file"
    else
        awk -F';' '{ print }' "$file"
    fi
}


#--------------------------USE COMMANDS---------------------------#

if [[ "$has_list" -eq 1 ]]; then
    for file in "${FILES[@]}"; do
        filter_by_datetime "$file" |
        awk -F';' -v user="$USER" '$1 == user'
    done
fi

if [[ "$has_list_currency" -eq 1 ]]; then
    for file in "${FILES[@]}"; do
        filter_by_datetime "$file" |
        awk -F';' -v user="$USER" '$1 == user' |
        awk -F';' '{print $3}' |
        sort |
        uniq
    done
fi

if [[ "$has_status" -eq 1 ]]; then
    for file in "${FILES[@]}"; do
        filter_by_datetime "$file" |
        awk -F';' -v user="$USER" '$1 == user' |
        awk -F';' '\
            {
                CURR[$3]+=$4
            } END {
                for (C in CURR)
                    print C " : " CURR[C]
            }' |
        sort |
        uniq
    done
fi

if [[ "$has_profit" -eq 1 ]]; then
    for file in "${FILES[@]}"; do
        filter_by_datetime "$file" |
        awk -F';' -v user="$USER" '$1 == user' |
        awk -F';' -v profit="$XTF_PROFIT" '\
            {
                CURR[$3]+=$4
            } END {
                for (C in CURR)
                    if (CURR[C] > 0)
                        print C " : " CURR[C] * (1 + profit / 100)
                    else
                        print C " : " CURR[C]
            }' |
        sort |
        uniq
    done
fi
